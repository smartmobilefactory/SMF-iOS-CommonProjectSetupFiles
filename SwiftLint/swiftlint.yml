###
# Swiftlint configuration file.
# Latest version supported: 0.22.0
# Any newer version hasn't been checked yet and might not follow the style guide.
###

disabled_rules: # rule identifiers to exclude from running
  - colon # exaclty one space after the : >>> let abc: Void\n
  - control_statement # no rounded brackets around conditions. we would need this the other way around
  - todo # TODO can be written in the code but should be linked to a ticket on JIRA.
  - unused_closure_parameter
  - redundant_string_enum_value
  - vertical_parameter_alignment

excluded: # paths to ignore during linting. overridden by `included`.
  - Carthage
  - Pods
  - External
  - Submodules
  - Generated
  - Core/Model/CoreData
  - App/Model/CoreData
  - Database/Model
  - fastlane

opt_in_rules:
  - valid_docs
  - force_unwrapping
  - conditional_returns_on_newline
  - private_outlet
  - vertical_whitespace
  - closure_spacing
  - explicit_init
  - redundant_nil_coalescing
  - nimble_operator
  - attributes
  - closure_end_indentation
  - empty_count
  - first_where
  - implicitly_unwrapped_optional
  - unneeded_parentheses_in_closure_argument
  - multiline_parameters
  - fatal_error_message
  - let_var_whitespace
  - redundant_string_enum_value

# rule parameters
file_length:
  warning: 600
  error: 800
  ignore_comment_only_lines: true

cyclomatic_complexity:
  ignores_case_statements: true
  warning: 10
  error: 20

nesting:
  type_level:
    warning: 6
  statement_level:
    warning: 6

function_body_length:
  warning: 40
  error: 80

line_length: 300

type_body_length:
  warning: 400
  error: 500

large_tuple:
  warning: 4
  error: 6

identifier_name:
  excluded:
    - to
    - id
    - by
    - of
    - at
    - !str on
    - x
    - y
    - L

private_outlet:
  allow_private_set: true

custom_rules:
  extra_whitespace:
    name: "Extra whitespaces"
    regex: '([^\n/ \t]  |    | \t)'
    message: "Indentation should be done with tabs. Only whitespaces in comments and up to three whitespaces at the start of a line or after tabs are allowed."
    severity: warning
    match_kinds:
      - string
      - keyword
      - parameter
      - typeidentifier
      - number
      - identifier
  unnecessary_datatype:
    name: "Unnecessary Datatype"
    regex: '(?m-s)(let|var).*(:\s\[+(\w|:| |\t)+\]+\s*=\s*\[:*\])'
    message: "Unnecessary datatype. Use '= [DataType]()' instead of ': [DataType] = []'"
    severity: warning
  missing_closure_name:
    name: "Missing closure name"
    regex: '^\s*\}\) \{.*'
    message: "Add the missing closure name"
    severity: warning
  empty_commented_line:
    name: "Empty Commented Out Line"
    regex: '(\t+| +)//\n'
    message: "Remove useless comment lines or use /* format */"
    severity: warning
  comments_space:
    name: "Space After Comment"
    regex: '(^ *//\w+)'
    message: "There should be a space after //"
    severity: warning
  comments_capitalized_ignore_possible_code:
    name: "Capitalize First Word In Comment"
    regex: '(\s??// +(?!swiftlint)[a-z]+)'
    message: "The first word of a comment should be capitalized"
    severity: warning
  empty_first_line:
    name: "Empty First Line"
    regex: '(^[ a-zA-Z ]*(?:protocol|extension|class|struct) (?!(?:var|let))[ a-zA-Z:]*\{\n *\S+)'
    message: "There should be an empty line after a declaration"
    severity: warning
  empty_line_after_guard:
    name: "Empty Line After Guard"
    regex: '(^ *guard[ a-zA-Z0-9=?.\(\),><!]*\{[ a-zA-Z0-9=?.\(\),><!]*\}\n *(?!(?:return|guard))\S+)'
    message: "There should be an empty line after a guard"
    severity: warning
  empty_line_after_super:
    name: "Empty Line After Super"
    regex: '(^ *super\.[ a-zA-Z0-9=?.\(\)\{\}:,><!]*\n *(?!(?:\}|return))\S+)'
    message: "There should be an empty line after super"
    severity: warning
  multiple_empty_lines:
    name: "Multiple Empty Lines"
    regex: '((?:\s*\n){3,})'
    message: "There are too many empty lines"
    severity: warning
  unnecessary_leading_void_in:
    name: "Unnecessary -> Void in at the end of the line"
    regex: '(-> (Void|\(\)) in$)'
    message: "Unnecessary '-> Void in' at the end of the line. Use only 'in'"
    severity: warning
  unnecessary_type:
    name: "Unnecessary Type"
    regex: '(?sm)[ \ta-zA-Z0-9]?(?:let|var){1} [ \ta-zA-Z0-9]+?:[ \t]+?([a-zA-Z0-9]+?)[\t ]+?=[\t ]?\1'
    message: "Type Definition Not Needed"
    severity: warning
  missing_brackets:
    name: "Missing brackets"
    regex: '(^(\t| )*(if|\} else if) (((?!(let|var|\())).)*\{)'
    message: "If statements should be surrounded by rounded brackets"
    severity: warning
  empty_closure_params:
    name: "Empty closure params"
    regex: '\{ (\(\) -> Void in)$'
    message: "`() -> Void in` should be avoided"
    severity: warning
  incomplete_if:
    name: "Incomplete if"
    regex: '(^ *if \(((?!( is | > | < | (=|!|<|>)= )).)*\) \{)'
    message: "if should contain == true or == false"
    severity: warning
  single_line_body:
    name: "Single Line Body"
    regex: '(?i-sm)((if|while|do|for)*? \{(?!\n|.?(s|g)et).+?\}\n)'
    message: "Single line bodies are not allowed"
    severity: warning
  missing_closure_datatype:
    name: "Missing Closure Data Type"
    regex: '(\{[\s]{1}(\[weak [\w]+?\][\s]{1})*?\([^:]+?\)[\s]{1}in)'
    message: "Data Type in Closure is missing"
    severity: warning
  invalid_mark_format:
    name: "Invalid MARK Format"
    regex: '(?m-s)(\/\/[\s]*?MARK(?!(\:[\s]{1}\-[\s]{1}){1}))'
    message: "Use format: MARK: - Your Info"
    severity: warning
  missing_todo_link:
    name: "Missing TODO Link"
    regex: '(?i-s)((//|\*)[\s]*?(TODO|FIXME)((?!https://smartmobilefactory.atlassian.net).)*$)'
    message: "Missing Link to Jira for TODO"
    severity: warning
  missing_todo_message:
    name: "Missing TODO Message"
    regex: '(?i-s)(//|\*)[\s]*?(TODO|FIXME)[:\s]+https://smartmobilefactory.atlassian.net'
    message: "Missing TODO description"
    severity: warning
  missing_brackets_unwrap:
    name: "Missing rounded brackets around ??"
    regex: '(\?\?[^)]*$)'
    message: "Missing rounded brackets around ??"
    severity: warning
  unnecessary_space:
    name: "Unnecessary Space"
    regex: '(\[[a-zA-Z]+? {1}: {1}[a-zA-Z]+?\])'
    message: "Unnecessary space. use [DataType: DataType]."
    severity: warning
  missing_space:
    name: "Missing Space"
    regex: '(\[[a-zA-Z]+?:[a-zA-Z]+?\])'
    message: "Missing space. use [DataType: DataType]."
    severity: warning
  missing_empty_line:
    name: "Missing Empty Line"
    regex: '(?-smxi)(\}\n)([ \t]*?)([^\n\}\t ])'
    message: "Missing empty line."
    severity: warning
  get_prefixed_function:
    name: "Get prefixed function"
    regex: '(?-smxi)(func get[\w]+?(\())'
    message: "You should not prefix your functions with the word get."
    severity: warning

####### enabled rules #######
#  - comma # k,v >> k, v
#  - file_length # max number of lines per file
#  - force_cast # as!
#  - force_try # try!
#  - function_body_length # max length of function body
#  - leading_whitespace # empty lines with whitespaces only
#  - legacy_constructor # e.g CGPointMake(...) >>> CGPoint(x: ..., y: ...)
#  - line_length # max length of a line
#  - opening_brace # [].map(){ ... } >>> [].map() { ... }
#  - operator_function_whitespace # func  thing () {...} >>> func thing() {...}
#  - return_arrow_whitespace # func thing()->Bool >>> func thing() -> Bool
#  - statement_position # }else if { >>> } else if {
#  - trailing_newline # new line at the end of a file
#  - trailing_semicolon # no ;
#  - trailing_whitespace # no trailing whitespaced
#  - type_body_length # max body length
#  - type_name # types should start with a capital letter
#  - valid_docs # docs should match the method signature
#  - variable_name_min_length # variables should have a 3 letter minimum name and 40 maximum.
#  - variable_name # variables should start with a lower case character or a capitalized one if `static`.
